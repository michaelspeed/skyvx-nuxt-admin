mutation CreateCountry($code: String, $name: String, $enabled: Boolean){
  createCountry(
    input:{
      data: {
        code: $code,
        name: $name,
        enabled: $enabled
      }
    }
  ) {
    country {
      id
    }
  }
}

mutation CreateLogin($identifier: String!, $password: String!){
  login(input:{
    identifier: $identifier,
    password: $password
  }) {
    user{
      id
      email
      role {
        id
        name
        type
      }
    }
    jwt
  }
}

mutation CreateCurrency($name: String, $key: String, $value: Float, $base: Boolean, $unicode: String){
  createCurrency(
    input: {
      data: {
        name: $name,
        key: $key,
        value: $value,
        base: $base,
        unicode: $unicode
      }
    }
  ){
    currency {
      id
    }
  }
}


mutation CreateLocation($format: String, $geoJSON: JSON, $placeId: String){
  createLocation(
    input: {
      data: {
        fomat: $format,
        geoJSON: $geoJSON,
        placeId: $placeId
      }
    }
  ) {
    location {
      id
    }
  }
}

mutation CreateCity(
  $name: String,
  $cmapping: String,
  $label: String,
  $location: ID,
  $hotel: Boolean,
  $intercity: Boolean,
  $tour: Boolean,
  $hourly: Boolean
){
  createCity(input:{
    data: {
      name: $name,
      cmapping: $cmapping,
      label: $label,
      location: $location,
      hotel:$hotel,
      intercity:$intercity,
      tours: $tour,
      hourly:$hourly
    }
  }) {
    city {
      id
    }
  }
}

mutation UpdateCity(
  $id: ID!,
  $name: String,
  $label: String,
  $hotel: Boolean,
  $intercity: Boolean,
  $tour: Boolean,
  $hourly: Boolean
){
  updateCity(input:{
    where:{
      id: $id
    },
    data: {
      name: $name,
      label: $label,
      hotel:$hotel,
      intercity:$intercity,
      tours: $tour,
      hourly:$hourly
    }
  }) {
    city {
      id
    }
  }
}

mutation CreateAirport($name: String, $location: ID, $city: ID){
  createAirport(input:{
    data: {
      name: $name,
      location: $location,
      city: $city
    }
  }) {
    airport {
      id
    }
  }
}

mutation CreateVehicle($class: String, $title: String, $tag: String, $operations: String, $icon: ID, $luggage: Boolean, $max: Int, $occ: String){
  createVehicle(
    input: {
      data: {
        vehicleClass: $class,
        title: $title,
        tagLiine: $tag,
        operations: $operations,
        icon: $icon,
        luggage: $luggage,
        max: $max,
        occupancy_log: $occ
      }
    }
  ){
    vehicle {
      id
    }
  }
}

mutation CreateIntercityPricing(
  $name: String,
  $base: Float,
  $tax: Float,
  $flat: Float,
  $toll: Float,
  $vehicle: ID,
  $origincity: ID,
  $destinationcity: ID
){
  createPricing(
    input:{
      data:{
        nameSlug: $name,
        type: INTER,
        base: $base,
        tax: $tax,
        flat: $flat,
        toll: $toll,
        vehicle: $vehicle,
        origincity: $origincity,
        destinationcity: $destinationcity
      }
    }
  ) {
    pricing {
      id
    }
  }
}

mutation CreateHotelPricing(
  $name: String,
  $base: Float,
  $tax: Float,
  $flat: Float,
  $toll: Float,
  $vehicle: ID
  $oloc: ID
  $dloc: ID,
  $hotel: ID,
  $trip: ENUM_PRICING_TRIP
){
  createPricing(
    input:{
      data:{
        nameSlug: $name,
        type: HOTEL,
        base: $base,
        tax: $tax,
        flat: $flat,
        toll: $toll,
        vehicle: $vehicle,
        originlocation: $oloc,
        destinationlocation: $dloc,
        hotelcity: $hotel,
        trip: $trip
      }
    }
  ) {
    pricing {
      id
    }
  }
}

mutation CreateHotel($name: String, $location: [ID!]!){
  createHotel(
    input: {
      data:{
        name: $name,
        locations: $location
      }
    }
  ) {
    hotel {
      id
    }
  }
}

mutation CreateHourlyPricing(
  $name: String,
  $base: Float,
  $tax: Float,
  $flat: Float,
  $toll: Float,
  $addBase: Float,
  $vehicle: ID,
  $max: Int,
  $min: Int,
  $dbundle: Int,
  $city: ID,
  $hunit: ENUM_PRICING_HORULYUNITS,
  $distance: ENUM_PRICING_DISTANCE,
  $unitJump: Int
){
  createPricing(
    input:{
      data:{
        nameSlug: $name,
        type: HOUR,
        base: $base,
        tax: $tax,
        flat: $flat,
        toll: $toll,
        vehicle: $vehicle,
        addBase: $addBase,
        minDuration: $max,
        maxDuration: $min,
        distanceBundle: $dbundle,
        hourlycity: $city,
        horulyUnits: $hunit,
        distance: $distance,
        unitjumps: $unitJump,
      }
    }
  ) {
    pricing {
      id
    }
  }
}

mutation UpdatePricing(
  $base: Float,
  $tax: Float,
  $flat: Float,
  $toll: Float,
  $addBase: Float,
  $max: Int,
  $min: Int,
  $dbundle: Int,
  $id: ID!
){
  updatePricing(
    input:{
      where: {
        id: $id
      },
      data:{
        base: $base,
        tax: $tax,
        flat: $flat,
        toll: $toll,
        addBase: $addBase,
        minDuration: $min,
        maxDuration: $max,
        distanceBundle: $dbundle
      }
    }
  ) {
    pricing {
      id
    }
  }
}

mutation CreateCategory($name: String, $icon: String){
  createTourCategory(
    input: {
      data: {
        name: $name,
        icon: $icon
      }
    }
  ) {
    tourCategory {
      id
    }
  }
}

mutation CreateTour($title: String, $youtube: String, $basic: String, $cats: [ID], $allMedia: [ID], $master: ID, $city: ID, $slug: String){
  createTour(
    input: {
      data: {
        title: $title,
        youtube: $youtube,
        basic: $basic,
        tour_categories: $cats,
        allmedia: $allMedia,
        mater: $master,
        city: $city,
        slug: $slug
      }
    }
  ) {
    tour {
      id
    }
  }
}

mutation UpdateTour($title: String, $youtube: String, $basic: String, $cats: [ID], $allMedia: [ID], $master: ID, $city: ID, $id: ID!, $slug: String){
  updateTour(
    input: {
      where: {
        id: $id
      },
      data: {
        title: $title,
        youtube: $youtube,
        basic: $basic,
        tour_categories: $cats,
        allmedia: $allMedia,
        mater: $master,
        city: $city,
        slug: $slug
      }
    }
  ) {
    tour {
      id
    }
  }
}

mutation CreatePromo($code: String, $type: ENUM_PROMO_TYPE, $applicable: ENUM_PROMO_APPLICABLE, $value: Int, $max: Int, $min: Int){
  createPromo(
    input: {
      data:{
        code: $code,
        type: $type,
        applicable: $applicable,
        value: $value,
        max: $max,
        min: $min
      }
    }
  ) {
    promo {
      id
    }
  }
}

mutation UpdatePromo($code: String, $type: ENUM_PROMO_TYPE, $applicable: ENUM_PROMO_APPLICABLE, $value: Int, $max: Int, $min: Int, $id: ID!, $enabled: Boolean){
  updatePromo(
    input: {
      where: {
        id: $id
      },
      data:{
        code: $code,
        type: $type,
        applicable: $applicable,
        value: $value,
        max: $max,
        min: $min,
        enabled: $enabled
      }
    }
  ) {
    promo {
      id
    }
  }
}

mutation CreateDriver($name: String, $number: String){
  createDriver(
    input:{
      data: {
        name: $name,
        number: $number
      }
    }
  ) {
    driver {
      id
    }
  }
}

mutation UpdateDriver($name: String, $number: String, $id: ID!){
  updateDriver(
    input:{
      where: {
        id: $id
      }
      data: {
        name: $name,
        number: $number
      }
    }
  ) {
    driver {
      id
    }
  }
}
